<?php

namespace App\Models;


use App\Traits\HistoryTrait;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\DB;

class PurchaseItem extends BaseModel
{
    use HistoryTrait;
    use HasFactory;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function (self $item) {
            $item->applytCalculatedValues();
//            if ($item->purchase->status === 'Processed') {
//                DB::transaction(function () use ($item) {
//                    $item->product->increment('quantity', $item->quantity);
//                });
//            }
        });
        static::updating(function (self $item) {
            $item->applytCalculatedValues();
//            DB::transaction(function () use ($item) {
//                if ($item->getOriginal('quantity') !== $item->quantity) {
//                    $item->product->decrement('quantity', $item->getOriginal('quantity') - $item->quantity);
//                }
//                if ($item->returned_quantity <= $item->quantity) {
//                    if ($item->returned_quantity !== $item->getOriginal('returned_quantity')) {
//                        $item->product->decrement('quantity', $item->returned_quantity - $item->getOriginal('returned_quantity'));
//                        $returning = new PurchaseReturn();
//                        $returning->forceFill([
//                            "purchase_id" => $item->purchase_id,
//                            "purchase_item_id" => $item->id,
//                            "product_id" => $item->product_id,
//                            "supplier_id" => $item->supplier_id,
//                            "quantity" => $item->returned_quantity - $item->getOriginal('returned_quantity'),
//                            "amount" => round(($item->returned_quantity - $item->getOriginal('returned_quantity')) * $item->price, 2)
//                        ]);
//                        $returning->saveOrFail();
//                    }
//                }
//            });
        });
//        static::updated(function (self $item) {
//            $purchase = $item->purchase;
//            $purchase->returned = $purchase->items->sum('returned_total');
//            $purchase->saveOrFail();
//        });
//        static::deleting(function (self $item) {
////            $item->product->decrement('quantity', $item->quantity);
//            $purchase = $item->purchase;
//            $purchase->returned = $purchase->items->sum('returned_total');
//            $purchase->saveOrFail();
//        });
    }

    private function applytCalculatedValues()
    {
        $this->total = round(($this->quantity ?? 0) * ($this->price ?? 0), 2);
//        $this->returned_total = round(($this->returned_quantity ?? 0) * ($this->price ?? 0), 2);
    }

    public function product()
    {
        return $this->hasOne(Product::class, 'id', 'product_id');
    }

    public function supplier()
    {
        return $this->belongsTo(Supplier::class, 'id', 'supplier_id');
    }

    public function purchase()
    {
        return $this->belongsTo(Purchase::class, 'purchase_id', 'id');
    }
    public function unit()
    {
        /**
         * Tutorial:
         * First we need to get the product. So, using
         * products.id (first key, means target model Product) = sale_items.product_id (Local Key means Sale Items local key)
         * now we got product,
         * so now
         */
        return $this->hasOneThrough(
            Unit::class,
            Product::class,
            'id',
            'id',
            'product_id',
            'unit_id',
        );
    }
}
