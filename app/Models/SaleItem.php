<?php

namespace App\Models;


use App\Traits\HistoryTrait;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Facades\DB;

class SaleItem extends BaseModel
{
    use HasFactory, HistoryTrait;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function (self $item) {
            $item->applytCalculatedValues();
            if ($item->sale->status === 'Processed') {
                DB::transaction(function () use ($item) {
                    $item->product->decrement('quantity', $item->quantity);
                });
            }
        });
        static::updating(function (self $item) {
            $item->applytCalculatedValues();
            DB::transaction(function () use ($item) {
                if ($item->getOriginal('quantity') !== $item->quantity) {
                    $item->product->increment('quantity', $item->getOriginal('quantity') - $item->quantity);
                }
                if ($item->return_quantity <= $item->quantity) {
                    if ($item->return_quantity !== $item->getOriginal('return_quantity')) {
                        $item->product->increment('quantity', $item->return_quantity - $item->getOriginal('return_quantity'));
                    }
                }
            });
        });
        static::deleting(function (self $item) {
            $item->product->increment('quantity', $item->quantity);
        });
    }

    private function applytCalculatedValues()
    {
        $this->total = round(($this->quantity ?? 0) * ($this->price ?? 0), 2);
        $this->payable = round(($this->total ?? 0) * (1 + ($this->tax ?? 0) / 100 - ($this->discount ?? 0) / 100), 2);
        $this->return_price = round(($this->return_quantity ?? 0) * ($this->price ?? 0), 2);
    }

    public function sale()
    {
        return $this->belongsTo(Sale::class, 'sale_id');
    }

    public function customer()
    {
        return $this->belongsTo(Customer::class, 'id', 'customer_id');
    }

    public function product()
    {
        return $this->belongsTo(Product::class, 'product_id');
    }
}
