<?php

namespace App\Models;


use App\Traits\HistoryTrait;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class SalePayment extends BaseModel
{
    use HasFactory, HistoryTrait;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($item) {
            $item->taken_by = auth()->id();
        });
        static::created(function ($item) {
            $paid = $item->sale->payments->sum('payment_amount');
            $item->sale->paid = $paid;
            $item->sale->balance = $item->sale->payable - $paid;
            $item->sale->saveOrFail();

            if ($item->payment_method == "Credit") {
                $customerFund = new CustomerFund();
                $customerFund->customer_id = $item->customer_id;
                $customerFund->payment_amount = round($item->payment_amount, 2);
                $customerFund->type = "withdrawn";
                $customerFund->message = "BDT {$item->payment_amount} withdrawn to make payment for Sale # {$item->sale->id}";
                $customerFund->sale_id = $item->sale->id;
                $customerFund->payment_method = "Credit";
                $customerFund->date = Carbon::now()->format("Y-m-d");
                $customerFund->taken_by = auth()->id();
                $customerFund->saveOrFail();
            }
        });
    }

    public function sale()
    {
        return $this->belongsTo(Sale::class, 'sale_id', 'id');
    }

    public function customer()
    {
        return $this->belongsTo(Customer::class, 'customer_id', 'id');
    }
}
