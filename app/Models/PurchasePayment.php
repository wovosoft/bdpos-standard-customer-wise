<?php

namespace App\Models;


use App\Traits\HistoryTrait;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class PurchasePayment extends BaseModel
{
    use HasFactory, HistoryTrait;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($item) {
            $item->given_by = auth()->id();
        });
        static::created(function ($item) {
            $paid = $item->purchase->payments->sum('payment_amount');
            $item->purchase->paid = $paid;
            $item->purchase->balance = $item->purchase->payable - $paid;
            $item->purchase->saveOrFail();

            if ($item->payment_method == "Credit") {
                $fund = new SupplierFund();
                $fund->supplier_id = $item->supplier_id;
                $fund->payment_amount = round($item->payment_amount, 2);
                $fund->type = "withdrawn";
                $fund->message = "BDT {$item->payment_amount} withdrawn to make payment for Purchase # {$item->purchase->id}";
                $fund->purchase_id = $item->purchase->id;
                $fund->payment_method = "Credit";
                $fund->date = Carbon::now()->format("Y-m-d");
                $fund->given_by = auth()->id();
                $fund->saveOrFail();
            }
        });
    }

    public function purchase()
    {
        return $this->belongsTo(Purchase::class, 'purchase_id', 'id');
    }

    public function supplier()
    {
        return $this->hasOne(Supplier::class, 'id', 'supplier_id');
    }
}
