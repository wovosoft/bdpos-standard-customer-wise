<?php

namespace App\Models;


use App\Traits\HistoryTrait;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Sale extends BaseModel
{
    use HasFactory, HistoryTrait;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        /**
         * Only record previous and current balance.
         * According to customer requirements they do not need dynamic balance maintenance.
         * before, creating,
         * previous balance = SUM(sales.payable) - SUM(sale_payments.payment_amount)
         * after, created,
         * current balance = SUM(sales.payable) - SUM(sale_payments.payment_amount)
         *
         * Returned, depends on items returned_quantity value, so it is calculated when
         * this property changes in subsequent items.
         */
        static::creating(function (self $item) {
            $payable = self::query()
                ->where("customer_id", "=", $item->customer_id)
                ->sum("payable");
            $paid = SalePayment::query()
                ->where("customer_id", "=", $item->customer_id)
                ->sum("payment_amount");
            $item->previous_balance = $payable - $paid;
        });
        static::created(function (self $item) {
            $payable = self::query()
                ->where("customer_id", "=", $item->customer_id)
                ->sum("payable");
            $paid = SalePayment::query()
                ->where("customer_id", "=", $item->customer_id)
                ->sum("payment_amount");
            $item->current_balance = $payable - $paid;
            $item->saveOrFail();
        });
    }

    public function items()
    {
        return $this->hasMany(SaleItem::class, 'sale_id', 'id');
    }

    public function payments()
    {
        return $this->hasMany(SalePayment::class, 'sale_id', 'id');
    }

    public function customer()
    {
        return $this->belongsTo(Customer::class, "customer_id", "id");
    }

    public function returns()
    {
        return $this->hasMany(SaleReturn::class, 'sale_id');
    }
}
